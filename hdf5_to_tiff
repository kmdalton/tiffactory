#!/usr/bin/env python

"""
We will use the following naming convention

shot-<rayonix_timestamp>-pump{0,1}-<set_number>-<angle_index>.rx

here angle index is 1,2,3,...
each integer increment corresponds to a delta_phi rotation

the set number corresponds to the shot index at that fixed angle
"""

import sys
import os
import struct
import h5py
import numpy as np
import argparse
from experiment_params import *

LITTLE_ENDIAN = 1234
BIG_ENDIAN = 4321

def getRxHeader():
    rxfile = open(os.path.dirname(os.path.realpath(__file__)) + '/' + 'template.tiff','rb')
    header=rxfile.read(4096)
    return header

def push_data(source,form,offset,index,typelen,value):
    begin = source[0:offset+index]
    end = source[offset+index+typelen:]
    newtext = struct.pack(form,value)
    return begin+newtext+end

def tiff_byte_order_from_string(raw):
    four_bytes = raw[0:4]

    if 'II' in four_bytes[:2]:
        assert(struct.unpack('<H', four_bytes[2:])[0] == 42)
        return LITTLE_ENDIAN
    elif 'MM' in four_bytes[:2]:
        assert(struct.unpack('>H', four_bytes[2:])[0] == 42)
        return BIG_ENDIAN

    raise RuntimeError, '{:s} not recognised as TIFF'.format(filename)

def modify_basic_image_size(tiff_header,newwidth,newheight):
    # basically an adaptation from dxtbx format FormatTIFFHelpers
    byte_order = tiff_byte_order_from_string(tiff_header)

    if byte_order == LITTLE_ENDIAN:
      _I = '<I'
      _H = '<H'
    else:
      _I = '>I'
      _H = '>H'

    offset = struct.unpack(_I, tiff_header[4:8])[0]

    ntags = struct.unpack(_H, tiff_header[offset:offset + 2])[0]
    start = offset + 2
    for j in range(ntags):
      type_desc = struct.unpack(_H, tiff_header[start:start + 2])[0]
      start += 2
      type_type = struct.unpack(_H, tiff_header[start:start + 2])[0]
      start += 2
      type_size = struct.unpack(_I, tiff_header[start:start + 4])[0]
      start += 4
      if type_type == 4:
        type_offset_or_value = struct.unpack(
            _I, tiff_header[start:start + 4])[0]
        start += 4
      elif type_type == 3:
        type_offset_or_value = struct.unpack(
            _H, tiff_header[start:start + 2])[0]
        start += 4

      if type_desc == 256:
        image_width = type_offset_or_value
        #print "start for image_width is ",start-4,type_type,type_size,_I,image_width
        w_index = start-4
        w_form = _I
        w_len = {4:4,3:2}[type_type]
    
      elif type_desc == 257:
        image_height = type_offset_or_value
        #print "start for image_height is ",start-4,type_type,type_size,_I,image_height
        h_index = start-4
        h_form = _I
        h_len = {4:4,3:2}[type_type]

      elif type_desc == 258:
        image_depth = type_offset_or_value
      elif type_desc == 273:
        header_size = type_offset_or_value

    #now comes the modification:
    newdata = push_data(tiff_header,w_form,offset=0,index=w_index,typelen=w_len,value=newwidth)
    newdata = push_data(newdata,h_form,offset=0,index=h_index,typelen=h_len,value=newheight)
    return newdata

def write_tiff_detail(d, path, delta_phi, angle_index):
  #assure that the 2-byte data are within the unsigned limits
  #selecthi = d["DATA"]>65535
  #d["DATA"].set_selected(selecthi,0)
  #selectlo = d["DATA"]<0
  #d["DATA"].set_selected(selectlo,0)

  #idata = d["DATA"].as_numpy_array()
  #idata =  idata.astype("uint16")
  idata = d["DATA"].astype("uint16")
  string_data = idata.tostring()

  raw_header = getRxHeader()
  offset=1024
  new_header = push_data(raw_header,form="<I",offset=offset,index=80,typelen=4,value=d["SIZE1"])
  new_header = push_data(new_header,form="<I",offset=offset,index=84,typelen=4,value=d["SIZE2"])
  new_header = modify_basic_image_size(new_header,d["SIZE1"],d["SIZE2"])

  beamx_px_1000 = int(1000*d["SIZE1"]*d["PIXEL_SIZE"]/2.)
  beamy_px_1000 = int(1000*d["SIZE2"]*d["PIXEL_SIZE"]/2.)
  new_header = push_data(new_header,form="<I",offset=offset,index=644,typelen=4,value=beamx_px_1000)
  new_header = push_data(new_header,form="<I",offset=offset,index=648,typelen=4,value=beamy_px_1000)

  px_sz_nm = int(1000000 * d["PIXEL_SIZE"])
  new_header = push_data(new_header,form="<I",offset=offset,index=772,typelen=4,value=px_sz_nm)
  new_header = push_data(new_header,form="<I",offset=offset,index=776,typelen=4,value=px_sz_nm)

  distance_1000 = int(1000 * d["DISTANCE"])
  new_header = push_data(new_header,form="<I",offset=offset,index=696,typelen=4,value=distance_1000)
  new_header = push_data(new_header,form="<I",offset=offset,index=640,typelen=4,value=distance_1000)

  wave_fm = int(d["WAVELENGTH"] * 100000)
  new_header = push_data(new_header,form="<I",offset=offset,index=908,typelen=4,value=wave_fm)

  start_phi=int(1000* (angle_index-1)*delta_phi)
  end_phi=int(1000* (angle_index)*delta_phi)
  new_header = push_data(new_header,form="<I",offset=offset,index=684,typelen=4,value=start_phi)
  new_header = push_data(new_header,form="<I",offset=offset,index=716,typelen=4,value=end_phi)
  new_header = push_data(new_header,form="<I",offset=offset,index=732,typelen=4,value=4) # rotation axis
  new_header = push_data(new_header,form="<I",offset=offset,index=736,typelen=4,value=int(1000*delta_phi))

  nheaders = struct.unpack("<I",new_header[76+offset:80+offset])[0]
  nfast = struct.unpack("<I",new_header[80+offset:84+offset])[0]
  nslow = struct.unpack("<I",new_header[84+offset:88+offset])[0]

  image_data = new_header + string_data

  file(path,"wb").write(image_data)
  return


def write_tiff(file_handle, index, path, delta_phi, rot):

    hc = 1.2398e4
    img = file_handle['rayonix'][index]
    l = hc / file_handle['ebeam/photon_energy'][index]

    d = {'SIZE1' :      img.shape[0],
         'SIZE2' :      img.shape[1],
         'DISTANCE' :   file_handle['work_dist'][index],
         'PIXEL_SIZE' : 0.08854,
         'WAVELENGTH' : l,
         'DATA'       : img
        }

    write_tiff_detail(d, path, delta_phi, rot)
    print(path)

    return


def sort_brightest(hdf5_path, target_path, pumps=None, readout=None, metadata=None):
    """
    Parameters
    ----------
    hdf5_path : str
        HDF5 filename to convert to tiffs
    target_path : str
        Directory in which to output tiff files
    pumps : dict (optional)
        Dictionary of pump event codes {'pump_name': 'event_code'}. 'event_code' must be a valid key in the hdf5 file. The keys will determine the subdirectory names for the tiffs. Defaults to {'pump1': 'evr/code_92', 'pump2': 'evr/code_93'} which was the scheme we used for ef-x experiments during LS53.
    readout : iterable of strings
        Iterables containing all the event codes corresponding to a nontrivial frame that was recorded from the detector. Defaults to ('evr/code_95', 'evr/code_97'). 
    metadata : iterable of strings
        List of event codes to write out as metadata in a tsv file.
    """

    print('*'*50)
    print('')
    print('PROCESSING FILE: {:s}'.format(hdf5_path))
    print('--> {:s}'.format(target_path))

    if readout is None:
        readout = ('evr/code_95', 'evr/code_97')

    if pumps is None:
        pumps = {
            'pump1': 'evr/code_92',
            'pump2': 'evr/code_93',
            }

    
    os.system('mkdir -p {:s}'.format(target_path))
    for k in pumps:
        os.system('mkdir {:s}/{:s}'.format(target_path, k))
    os.system('mkdir {:s}/off'.format(target_path))

    last_rot_index = 0

    print('> reading: {:s}'.format(hdf5_path))
    f = h5py.File(hdf5_path, 'r')
    ipm3         = np.array(f['ipm3'])
    readout      = np.product([f[k] for k in readout], 0)
    shots        = {k:np.array(f[v])*readout for k,v in pumps.items()}
    shots['off'] = readout*(1. - np.max(shots.values(), 0))

    rotation  = np.array(f['rotation_angle'])
    delta_phi = 0.25

    rotation_index = np.abs( np.round(((rotation - rotation[1]) / delta_phi)).astype(np.int) ) + last_rot_index + 1
    #rotation_index = np.round(rotation*100000)
    metadata_files = {k:open('{:s}/{:s}/metadata.tsv'.format(target_path, k), 'w') for k in shots}
    header = '\t'.join(['filename'] + metadata) + '\n'
    for k in metadata_files:
        metadata_files[k].write(header)

    for rot in np.unique(rotation_index[1:]):
    #for rot in np.unique(rotation_index):
        for k,v in shots.items():
            best   = (rotation_index == rot) * v * ipm3 
            best   = np.argsort(best)[np.sum(best==0):][::-1]
            for i,idx in enumerate(best, 1):
                filename = '{:d}_{:05d}.tiff'.format(i, rot)
                dirname  = '{:s}/{:s}/'.format(target_path, k)
                write_tiff(f, idx, dirname + filename, delta_phi, rot)
                formatify = lambda x: ','.join(map(str, x)) if hasattr(x, '__len__') else str(x)
                if metadata is not None:
                    metadata_files[k].write('\t'.join([filename] + [formatify(f[l][idx]) for l in metadata]) + '\n')

    f.close()
    for k in metadata_files:
        metadata_files[k].close()
    last_rot_index = rotation_index[-1]
    return

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('hdf5_file', type=str, nargs='+', help='hdf5 files to process')
    parser.add_argument('--out', type=str, help='Directory path to save tiffs. Defaults to current working directory.', default='.')    
    parser.add_argument('--metadata', nargs='+', type=str, help='HDF5 file keys for metadata to be written in the same directory as the tiff files', default=None)    
    parser.add_argument('--code', type=int, nargs='+', help="Event codes of the pumps in the experiment. Defaults to 92 93 which is suitable for LS53. Previous experiments with a single delay should just use 90", default=None)
    args = parser.parse_args()

    pumps = {
        'pumped1': 'evr/code_92',
        'pumped2': 'evr/code_93',
    }
    if args.code is not None:
        pumps = {'pumped{:d}'.format(i): 'evr/code_{:}'.format(code) for i,code in enumerate(args.code, 1)}
    print args.metadata
    print args.code

    for hdf5_path in args.hdf5_file:
        sort_brightest(hdf5_path, args.out, pumps, None, args.metadata)

    return


if __name__ == '__main__':
    main()


